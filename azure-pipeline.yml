trigger:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

variables:
  azure_subscription: Azure Subscription
  tf_state_resourceGroup: 'rg-advcore-shared-westeurope'
  tf_state_storageAccount: 'advcorestatestorage'
  tf_state_key: terraform.tfstate
  
stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: BuildAPI
        steps:
          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: build
              workingDirectory: src/backoffice/api

  - stage: Publish
    displayName: Publish
    dependsOn: Build
    jobs:
      - job: PublishAPI
        steps:
          - task: DotNetCoreCLI@2
            displayName: Publish
            inputs:
              command: publish
              publishWebProjects: true
              arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: true
              workingDirectory: src/backoffice/api/AdventureWorksCore.Api
          - publish: $(Build.ArtifactStagingDirectory)
            displayName: 'Publish artifact'
            artifact: api-app            

  - stage: Development
    displayName: Deploy on development
    dependsOn: Publish
    variables:
      workspace: development
    jobs:
      - job: Terraforming
        steps:
          - task: TerraformInstaller@0
            displayName: 'Install'
            inputs:
              terraformVersion: '1.0.0'
          - task: TerraformTaskV2@2
            displayName: 'Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: infrastructure
              backendServiceArm: $(azure_subscription)
              backendAzureRmResourceGroupName: $(tf_state_resourceGroup)
              backendAzureRmStorageAccountName: $(tf_state_storageAccount)
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: $(tf_state_key)
          - task: TerraformTaskV2@2
            displayName: Validate
            inputs:
              provider: azurerm
              command: validate
              workingDirectory: infrastructure
              environmentServiceNameAzureRM: $(azure_subscription)
          - task: TerraformTaskV2@2
            displayName: 'Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: -out plan-${{ variables.workspace }}
              workingDirectory: infrastructure
              environmentServiceNameAzureRM: $(azure_subscription)
            env:
              TF_WORKSPACE: ${{ variables.workspace }}
          - task: TerraformTaskV2@2
            displayName: Apply
            name: terraformApply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: 'plan-${{ variables.workspace }}'
              workingDirectory: infrastructure
              environmentServiceNameAzureRM: $(azure_subscription)
            env:
              TF_WORKSPACE: ${{ variables.workspace }}

      - deployment: Deployment
        environment: Development
        dependsOn: Terraforming
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Web API deployment'
                  inputs:
                    azureSubscription: $(azure_subscription)
                    appType: webApp
                    appName: advcoredevapp
                    package: $(Pipeline.Workspace)/api-app/*.zip
              
